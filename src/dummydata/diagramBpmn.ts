const bpmnDiagramData = {
  id: "DISPUTE_SAP_INBOUND:11:a5ddab2c-4dc0-11ec-8016-c62abf525942",
  bpmn20Xml:
    '<?xml version="1.0" encoding="UTF-8"?>\n<bpmn:definitions xmlns:bpmn="http://www.omg.org/spec/BPMN/20100524/MODEL" xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" xmlns:dc="http://www.omg.org/spec/DD/20100524/DC" xmlns:camunda="http://camunda.org/schema/1.0/bpmn" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:di="http://www.omg.org/spec/DD/20100524/DI" xmlns:bioc="http://bpmn.io/schema/bpmn/biocolor/1.0" id="Definitions_1uf5cnv" targetNamespace="http://bpmn.io/schema/bpmn" exporter="Camunda Modeler" exporterVersion="4.6.0">\n  <bpmn:process id="DISPUTE_SAP_INBOUND" name="DISPUTE_SAP_INBOUND" isExecutable="true" camunda:historyTimeToLive="P30D">\n    <bpmn:scriptTask id="Activity_1w9tz6j" name="Init process" scriptFormat="javascript">\n      <bpmn:extensionElements>\n        <camunda:executionListener class="com.maersk.workflow.camunda.EnvironmentLoader" event="start" />\n      </bpmn:extensionElements>\n      <bpmn:incoming>Flow_0nwt85g</bpmn:incoming>\n      <bpmn:outgoing>Flow_1wzdi3d</bpmn:outgoing>\n      <bpmn:script>var log = java.util.logging.Logger.getLogger(\'com.maersk.allocationworkflow\');\n\nvar uniqueExecutionId = "SAPUPDATE  Workflow; Process Instance ID# " + execution.getProcessInstanceId() + " -&gt; ";\nexecution.setVariable("uniqueExecutionId", uniqueExecutionId);\nlog.info(uniqueExecutionId + \'; Workflow Started\');\nexecution.setVariable("retryCount", 0);\nexecution.setVariable("isRetry", false);</bpmn:script>\n    </bpmn:scriptTask>\n    <bpmn:startEvent id="Event_0lcuwyx" name="SAP_EVENT_INBOUND">\n      <bpmn:outgoing>Flow_0nwt85g</bpmn:outgoing>\n      <bpmn:messageEventDefinition id="MessageEventDefinition_014zn1d" messageRef="Message_1uyab20" />\n    </bpmn:startEvent>\n    <bpmn:sequenceFlow id="Flow_0nwt85g" sourceRef="Event_0lcuwyx" targetRef="Activity_1w9tz6j" />\n    <bpmn:exclusiveGateway id="Gateway_0n4a6ot" default="Flow_0xdk3w5">\n      <bpmn:incoming>Flow_01068a5</bpmn:incoming>\n      <bpmn:incoming>Flow_0smifql</bpmn:incoming>\n      <bpmn:outgoing>Flow_0xdk3w5</bpmn:outgoing>\n      <bpmn:outgoing>Flow_1ugihsf</bpmn:outgoing>\n    </bpmn:exclusiveGateway>\n    <bpmn:sequenceFlow id="Flow_0xdk3w5" sourceRef="Gateway_0n4a6ot" targetRef="Gateway_13b9q4i" />\n    <bpmn:sequenceFlow id="Flow_1ugihsf" sourceRef="Gateway_0n4a6ot" targetRef="RetrySAPCall">\n      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${sapStatusCode&gt;=500 || sapStatusCode&gt;=400 || retryCase}</bpmn:conditionExpression>\n    </bpmn:sequenceFlow>\n    <bpmn:serviceTask id="Activity_0qde3ea" name="Update SAP" camunda:asyncBefore="true">\n      <bpmn:extensionElements>\n        <camunda:connector>\n          <camunda:inputOutput>\n            <camunda:inputParameter name="url">${sapInboundEndpoint}/erp-ml/fscm/dispute/update</camunda:inputParameter>\n            <camunda:inputParameter name="method">POST</camunda:inputParameter>\n            <camunda:inputParameter name="payload">\n              <camunda:script scriptFormat="javascript">var log = java.util.logging.Logger.getLogger("SAP EVENt call");\nvar eventBody = execution.getVariable("eventBody");\nlog.info("eventBody " + eventBody);\nvar eventData=JSON.parse(eventBody);\nexecution.setVariable("ohpDisputeId",eventData[0][0].dispute.ohpDisputeId)\ndelete eventData[0][0].dispute.ohpDisputeId;\nlog.info("eventData " + eventData);\n\nvar payload = JSON.stringify(eventData[0][0]);\nlog.info(uniqueExecutionId + " : sap update api payload : " + payload);\npayload;</camunda:script>\n            </camunda:inputParameter>\n            <camunda:inputParameter name="headers">\n              <camunda:map>\n                <camunda:entry key="Content-Type">application/json</camunda:entry>\n                <camunda:entry key="Accept">application/json</camunda:entry>\n                <camunda:entry key="Consumer-Key">${sapClientId}</camunda:entry>\n                <camunda:entry key="Authorization">${accessToken}</camunda:entry>\n              </camunda:map>\n            </camunda:inputParameter>\n            <camunda:outputParameter name="sapStatusCode">${statusCode}</camunda:outputParameter>\n            <camunda:outputParameter name="sap_response">\n              <camunda:script scriptFormat="js">var log = java.util.logging.Logger.getLogger("UpdateSapService");\n    connector.setVariable("retryCase",false); \n    if (statusCode == 200) {\n        log.info(uniqueExecutionId + " :UPDATE SAP api Error : " + response);\n        var body = JSON.parse(response);\n        connector.setVariable("messageType", body.disputeStatus.messageType);    \n        connector.setVariable("errorMessage", body.disputeStatus.errorMessage); \n        connector.setVariable("caseId", body.disputeStatus.caseId); \n        if(body.disputeStatus.messageType=="S"){\n            connector.setVariable("status","Success");   \n        }else{\n            if( checkErrorMessageContains("Case is locked by user",body.disputeStatus.messageType)){\n            \n            connector.setVariable("retryCase",true); \n            }\n            connector.setVariable("status","Failure"); \n        }\n    } else {\n        log.info(uniqueExecutionId + ":  UPDATE SAP api Error: " + response);\n        connector.setVariable("status","Error"); \n    }\n    connector.setVariable("httpStatusCode", statusCode);\n    response\n\n    function checkErrorMessageContains(matchString,errorMessage){\n        var exp = new RegExp(matchString);\n        if(errorMessage.match(exp) == null){\n            return false;\n        } else {\n            return true;\n        }\n    }</camunda:script>\n            </camunda:outputParameter>\n          </camunda:inputOutput>\n          <camunda:connectorId>http-connector</camunda:connectorId>\n        </camunda:connector>\n        <camunda:executionListener class="com.maersk.workflow.camunda.auth.handler.HttpConnectorDisputeServiceSAPAuthListener" event="start" />\n        <camunda:failedJobRetryTimeCycle>R3/PT5M</camunda:failedJobRetryTimeCycle>\n        <camunda:executionListener class="com.maersk.workflow.camunda.exception.handler.HttpSapConnectorExecutionListners" event="end" />\n      </bpmn:extensionElements>\n      <bpmn:incoming>Flow_1wzdi3d</bpmn:incoming>\n      <bpmn:incoming>Flow_019gl9e</bpmn:incoming>\n      <bpmn:outgoing>Flow_1lpi1fk</bpmn:outgoing>\n    </bpmn:serviceTask>\n    <bpmn:sequenceFlow id="Flow_1lpi1fk" sourceRef="Activity_0qde3ea" targetRef="Gateway_0zqbot3" />\n    <bpmn:userTask id="RetrySAPCall" name="Retry SAP CALL">\n      <bpmn:extensionElements>\n        <camunda:taskListener event="create">\n          <camunda:script scriptFormat="javascript">task.execution.setVariable("taskId",task.getId())\n\nvar count=task.execution.getVariable("retryCount")\ntask.execution.setVariable("retryCount",count+1)</camunda:script>\n        </camunda:taskListener>\n      </bpmn:extensionElements>\n      <bpmn:incoming>Flow_1ugihsf</bpmn:incoming>\n      <bpmn:outgoing>Flow_1nctbic</bpmn:outgoing>\n    </bpmn:userTask>\n    <bpmn:sequenceFlow id="Flow_1nctbic" sourceRef="RetrySAPCall" targetRef="Gateway_1npnv65" />\n    <bpmn:exclusiveGateway id="Gateway_1npnv65" default="Flow_10wyo6d">\n      <bpmn:incoming>Flow_1nctbic</bpmn:incoming>\n      <bpmn:outgoing>Flow_10wyo6d</bpmn:outgoing>\n      <bpmn:outgoing>Flow_0xjxcyk</bpmn:outgoing>\n    </bpmn:exclusiveGateway>\n    <bpmn:sequenceFlow id="Flow_10wyo6d" sourceRef="Gateway_1npnv65" targetRef="Event_103f293" />\n    <bpmn:serviceTask id="Activity_12ocsvv" name="Create SAP Traces" camunda:asyncBefore="true">\n      <bpmn:extensionElements>\n        <camunda:connector>\n          <camunda:inputOutput>\n            <camunda:inputParameter name="url">${ohpdisputeendpoint}/api/dispute/trace</camunda:inputParameter>\n            <camunda:inputParameter name="method">POST</camunda:inputParameter>\n            <camunda:inputParameter name="payload">\n              <camunda:script scriptFormat="javascript">var log = java.util.logging.Logger.getLogger(\'com.maersk.sapdispute\');\nvar request={}\nrequest["ohpDisputeId"]=execution.getVariable("ohpDisputeId")\nrequest["packet"]="SAP-PCKT"\nrequest["retryCount"]=execution.getVariable("retryCount")\nrequest["status"]=execution.getVariable("status")\nrequest["logs"]=execution.getVariable("sap_response")\nrequest["payload"]=execution.getVariable("eventBody").toString();\nrequest["workflowInstanceId"]=execution.getProcessInstanceId()\nrequest["taskId"]=execution.getVariable("taskId")\nJSON.stringify(request);</camunda:script>\n            </camunda:inputParameter>\n            <camunda:inputParameter name="headers">\n              <camunda:map>\n                <camunda:entry key="Content-Type">application/json</camunda:entry>\n                <camunda:entry key="Accept">application/json</camunda:entry>\n                <camunda:entry key="Consumer-Key">${ohpdisputeconsumerkey}</camunda:entry>\n                <camunda:entry key="Authorization">${accessToken}</camunda:entry>\n              </camunda:map>\n            </camunda:inputParameter>\n            <camunda:outputParameter name="craeteDisputeTraceResponse">\n              <camunda:script scriptFormat="javascript">var log = java.util.logging.Logger.getLogger("CreateDisputeTask");\n\nif(statusCode == 200) {\n    log.info(uniqueExecutionId+" :craete  api response : "+response);\n} else {\n    log.info(uniqueExecutionId+":  mapping  api Error: "+response);\n}\nconnector.setVariable("httpStatusCode", statusCode);\nresponse</camunda:script>\n            </camunda:outputParameter>\n          </camunda:inputOutput>\n          <camunda:connectorId>http-connector</camunda:connectorId>\n        </camunda:connector>\n        <camunda:executionListener class="com.maersk.workflow.camunda.exception.handler.HttpConnectorExecutionListener" event="end" />\n        <camunda:executionListener event="end">\n          <camunda:script scriptFormat="javascript">execution.setVariable("sendEmailFlag",false)\nexecution.setVariable("updateDispute",false)</camunda:script>\n        </camunda:executionListener>\n        <camunda:executionListener class="com.maersk.workflow.camunda.auth.handler.HttpConnectorDisputeServiceAuthListener" event="start" />\n        <camunda:failedJobRetryTimeCycle>R3/PT5M</camunda:failedJobRetryTimeCycle>\n      </bpmn:extensionElements>\n      <bpmn:incoming>Flow_0yidmvh</bpmn:incoming>\n      <bpmn:outgoing>Flow_01068a5</bpmn:outgoing>\n    </bpmn:serviceTask>\n    <bpmn:sequenceFlow id="Flow_01068a5" sourceRef="Activity_12ocsvv" targetRef="Gateway_0n4a6ot" />\n    <bpmn:endEvent id="Event_166c1yb">\n      <bpmn:incoming>Flow_027849y</bpmn:incoming>\n      <bpmn:terminateEventDefinition id="TerminateEventDefinition_12qe83d" />\n    </bpmn:endEvent>\n    <bpmn:endEvent id="Event_103f293">\n      <bpmn:incoming>Flow_10wyo6d</bpmn:incoming>\n      <bpmn:terminateEventDefinition id="TerminateEventDefinition_025qaug" />\n    </bpmn:endEvent>\n    <bpmn:sequenceFlow id="Flow_0l18olf" sourceRef="Event_0s512qc" targetRef="Event_0mphg3k" />\n    <bpmn:endEvent id="Event_0mphg3k">\n      <bpmn:incoming>Flow_0l18olf</bpmn:incoming>\n      <bpmn:terminateEventDefinition id="TerminateEventDefinition_0zakynp" />\n    </bpmn:endEvent>\n    <bpmn:boundaryEvent id="Event_0s512qc" attachedToRef="RetrySAPCall">\n      <bpmn:outgoing>Flow_0l18olf</bpmn:outgoing>\n      <bpmn:messageEventDefinition id="MessageEventDefinition_0221lax" messageRef="Message_0axvte4" />\n    </bpmn:boundaryEvent>\n    <bpmn:sequenceFlow id="Flow_0xjxcyk" sourceRef="Gateway_1npnv65" targetRef="Activity_14z67lu">\n      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${isRetry}</bpmn:conditionExpression>\n    </bpmn:sequenceFlow>\n    <bpmn:sequenceFlow id="Flow_1wzdi3d" sourceRef="Activity_1w9tz6j" targetRef="Activity_0qde3ea" />\n    <bpmn:serviceTask id="Activity_14z67lu" name="Update SAP Traces In process" camunda:asyncBefore="true">\n      <bpmn:extensionElements>\n        <camunda:connector>\n          <camunda:inputOutput>\n            <camunda:inputParameter name="url">${ohpdisputeendpoint}/api/dispute/${ohpDisputeId}/trace/${ohpDisputeTracId}</camunda:inputParameter>\n            <camunda:inputParameter name="method">PATCH</camunda:inputParameter>\n            <camunda:inputParameter name="payload">\n              <camunda:script scriptFormat="javascript">var log = java.util.logging.Logger.getLogger(\'com.maersk.sapdispute\');\nvar request={}\nrequest["ohpDisputeId"]=execution.getVariable("ohpDisputeId")\nrequest["retryCount"]=execution.getVariable("retryCount")\nrequest["status"]=execution.getVariable("In-Process")\nJSON.stringify(request);</camunda:script>\n            </camunda:inputParameter>\n            <camunda:inputParameter name="headers">\n              <camunda:map>\n                <camunda:entry key="Content-Type">application/json</camunda:entry>\n                <camunda:entry key="Accept">application/json</camunda:entry>\n                <camunda:entry key="Consumer-Key">${ohpdisputeconsumerkey}</camunda:entry>\n                <camunda:entry key="Authorization">${accessToken}</camunda:entry>\n              </camunda:map>\n            </camunda:inputParameter>\n            <camunda:outputParameter name="craeteDisputeTraceResponse">\n              <camunda:script scriptFormat="javascript">var log = java.util.logging.Logger.getLogger("CreateDisputeTask");\n\nif(statusCode == 200) {\n    log.info(uniqueExecutionId+" :craete  api response : "+response);\n} else {\n    log.info(uniqueExecutionId+":  mapping  api Error: "+response);\n}\nconnector.setVariable("httpStatusCode", statusCode);\nS(response)</camunda:script>\n            </camunda:outputParameter>\n          </camunda:inputOutput>\n          <camunda:connectorId>http-connector</camunda:connectorId>\n        </camunda:connector>\n        <camunda:executionListener class="com.maersk.workflow.camunda.exception.handler.HttpConnectorExecutionListener" event="end" />\n        <camunda:executionListener event="end">\n          <camunda:script scriptFormat="javascript">execution.setVariable("sendEmailFlag",false)\nexecution.setVariable("updateDispute",false)</camunda:script>\n        </camunda:executionListener>\n        <camunda:executionListener class="com.maersk.workflow.camunda.auth.handler.HttpConnectorDisputeServiceAuthListener" event="start" />\n        <camunda:failedJobRetryTimeCycle>R3/PT10M</camunda:failedJobRetryTimeCycle>\n      </bpmn:extensionElements>\n      <bpmn:incoming>Flow_0xjxcyk</bpmn:incoming>\n      <bpmn:outgoing>Flow_019gl9e</bpmn:outgoing>\n    </bpmn:serviceTask>\n    <bpmn:sequenceFlow id="Flow_019gl9e" sourceRef="Activity_14z67lu" targetRef="Activity_0qde3ea" />\n    <bpmn:exclusiveGateway id="Gateway_0zqbot3" default="Flow_0yidmvh">\n      <bpmn:incoming>Flow_1lpi1fk</bpmn:incoming>\n      <bpmn:outgoing>Flow_0yidmvh</bpmn:outgoing>\n      <bpmn:outgoing>Flow_073l8pm</bpmn:outgoing>\n    </bpmn:exclusiveGateway>\n    <bpmn:sequenceFlow id="Flow_0yidmvh" sourceRef="Gateway_0zqbot3" targetRef="Activity_12ocsvv" />\n    <bpmn:serviceTask id="Activity_0rigmcu" name="Update SAP Traces In process" camunda:asyncBefore="true">\n      <bpmn:extensionElements>\n        <camunda:connector>\n          <camunda:inputOutput>\n            <camunda:inputParameter name="url">${ohpdisputeendpoint}/api/dispute/${ohpDisputeId}/trace/${ohpDisputeTracId}</camunda:inputParameter>\n            <camunda:inputParameter name="method">PATCH</camunda:inputParameter>\n            <camunda:inputParameter name="payload">\n              <camunda:script scriptFormat="javascript">var log = java.util.logging.Logger.getLogger(\'com.maersk.sapdispute\');\nvar request={}\nrequest["ohpDisputeId"]=execution.getVariable("ohpDisputeId")\nrequest["retryCount"]=execution.getVariable("retryCount")\nrequest["status"]=execution.getVariable("In-Process")\nJSON.stringify(request);</camunda:script>\n            </camunda:inputParameter>\n            <camunda:inputParameter name="headers">\n              <camunda:map>\n                <camunda:entry key="Content-Type">application/json</camunda:entry>\n                <camunda:entry key="Accept">application/json</camunda:entry>\n                <camunda:entry key="Consumer-Key">${ohpdisputeconsumerkey}</camunda:entry>\n                <camunda:entry key="Authorization">${accessToken}</camunda:entry>\n              </camunda:map>\n            </camunda:inputParameter>\n            <camunda:outputParameter name="craeteDisputeTraceResponse">\n              <camunda:script scriptFormat="javascript">var log = java.util.logging.Logger.getLogger("CreateDisputeTask");\n\nif(statusCode == 200) {\n    log.info(uniqueExecutionId+" :craete  api response : "+response);\n} else {\n    log.info(uniqueExecutionId+":  mapping  api Error: "+response);\n}\nconnector.setVariable("httpStatusCode", statusCode);\nS(response)</camunda:script>\n            </camunda:outputParameter>\n          </camunda:inputOutput>\n          <camunda:connectorId>http-connector</camunda:connectorId>\n        </camunda:connector>\n        <camunda:executionListener class="com.maersk.workflow.camunda.exception.handler.HttpConnectorExecutionListener" event="end" />\n        <camunda:executionListener event="end">\n          <camunda:script scriptFormat="javascript">execution.setVariable("sendEmailFlag",false)\nexecution.setVariable("updateDispute",false)</camunda:script>\n        </camunda:executionListener>\n        <camunda:executionListener class="com.maersk.workflow.camunda.auth.handler.HttpConnectorDisputeServiceAuthListener" event="start" />\n        <camunda:failedJobRetryTimeCycle>R3/PT5M</camunda:failedJobRetryTimeCycle>\n      </bpmn:extensionElements>\n      <bpmn:incoming>Flow_073l8pm</bpmn:incoming>\n      <bpmn:outgoing>Flow_0smifql</bpmn:outgoing>\n    </bpmn:serviceTask>\n    <bpmn:sequenceFlow id="Flow_073l8pm" sourceRef="Gateway_0zqbot3" targetRef="Activity_0rigmcu">\n      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${isRetry}</bpmn:conditionExpression>\n    </bpmn:sequenceFlow>\n    <bpmn:sequenceFlow id="Flow_0smifql" sourceRef="Activity_0rigmcu" targetRef="Gateway_0n4a6ot" />\n    <bpmn:exclusiveGateway id="Gateway_13b9q4i" default="Flow_027849y">\n      <bpmn:incoming>Flow_0xdk3w5</bpmn:incoming>\n      <bpmn:outgoing>Flow_027849y</bpmn:outgoing>\n      <bpmn:outgoing>Flow_0b76qi1</bpmn:outgoing>\n    </bpmn:exclusiveGateway>\n    <bpmn:sequenceFlow id="Flow_027849y" sourceRef="Gateway_13b9q4i" targetRef="Event_166c1yb" />\n    <bpmn:endEvent id="Event_0q04o7a">\n      <bpmn:incoming>Flow_0dz7dly</bpmn:incoming>\n    </bpmn:endEvent>\n    <bpmn:sequenceFlow id="Flow_0b76qi1" sourceRef="Gateway_13b9q4i" targetRef="Activity_1cpf4cg">\n      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${status=="Success"}</bpmn:conditionExpression>\n    </bpmn:sequenceFlow>\n    <bpmn:serviceTask id="Activity_1cpf4cg" name="FSCMtime stamp Dispute" camunda:asyncBefore="true">\n      <bpmn:extensionElements>\n        <camunda:connector>\n          <camunda:inputOutput>\n            <camunda:inputParameter name="url">${ohpdisputeendpoint}/api/dispute/${ohpDisputeId}</camunda:inputParameter>\n            <camunda:inputParameter name="method">PATCH</camunda:inputParameter>\n            <camunda:inputParameter name="payload">\n              <camunda:script scriptFormat="javascript">var log = java.util.logging.Logger.getLogger(\'com.maersk.disputeCreate\');\nvar request={}\nvar rejectStatus=["71","72","73","74","76","77","78"]\nvar acceptStatus=["61","62","63","64","65","66","67"]\nvar rejectWithVoiceStatus=["30"]\nvar redisputeStatus=["75"]\n\nif(execution.getVariable("statusCode")){\n    if(rejectStatus.indexOf(searchData.prop("statusCode").stringValue())&gt;-1 || acceptStatus.indexOf(searchData.prop("statusCode").stringValue())&gt;-1){\n        request["fscmChangedTs"]=new Date().toISOString()\n        request["fscmClosedTs"]=new Date().toISOString()\n        \n    \n    }else if(redisputeStatus.indexOf(searchData.prop("statusCode").stringValue())&gt;-1){\n        request["fscmChangedTs"]=new Date().toISOString()\n        request["fscmClosedTs"]=null\n        \n\n    }else{\n        request["fscmChangedTs"]=new Date().toISOString()\n\n    }\n\n}else{\n     request["fscmChangedTs"]=new Date().toISOString()\n}\nrequest["sourceSystem"]="FSCM"\nexecution.setVariable("fscmBody",JSON.stringify(request))\n\nJSON.stringify(request);\n\n</camunda:script>\n            </camunda:inputParameter>\n            <camunda:inputParameter name="headers">\n              <camunda:map>\n                <camunda:entry key="Content-Type">application/json</camunda:entry>\n                <camunda:entry key="Accept">application/json</camunda:entry>\n                <camunda:entry key="Consumer-Key">${ohpdisputeconsumerkey}</camunda:entry>\n                <camunda:entry key="Authorization">${accessToken}</camunda:entry>\n              </camunda:map>\n            </camunda:inputParameter>\n            <camunda:outputParameter name="craeteDisputeResponse">\n              <camunda:script scriptFormat="javascript">var log = java.util.logging.Logger.getLogger("CreateDisputeTask");\n\nif(statusCode == 200) {\n    log.info(uniqueExecutionId+" :craete  api response : "+response);\n} else {\n    log.info(uniqueExecutionId+":  mapping  api Error: "+response);\n}\nconnector.setVariable("httpStatusCode", statusCode);</camunda:script>\n            </camunda:outputParameter>\n          </camunda:inputOutput>\n          <camunda:connectorId>http-connector</camunda:connectorId>\n        </camunda:connector>\n        <camunda:executionListener class="com.maersk.workflow.camunda.exception.handler.HttpConnectorExecutionListener" event="end" />\n        <camunda:executionListener class="com.maersk.workflow.camunda.auth.handler.HttpConnectorDisputeServiceAuthListener" event="start" />\n        <camunda:failedJobRetryTimeCycle>R3/PT5M</camunda:failedJobRetryTimeCycle>\n      </bpmn:extensionElements>\n      <bpmn:incoming>Flow_0b76qi1</bpmn:incoming>\n      <bpmn:outgoing>Flow_0dz7dly</bpmn:outgoing>\n    </bpmn:serviceTask>\n    <bpmn:sequenceFlow id="Flow_0dz7dly" sourceRef="Activity_1cpf4cg" targetRef="Event_0q04o7a" />\n    <bpmn:textAnnotation id="TextAnnotation_0iax5ku">\n      <bpmn:text>Whenever Ohp status is close then it recieve the event and will close the running process</bpmn:text>\n    </bpmn:textAnnotation>\n    <bpmn:association id="Association_1hcsnsf" sourceRef="Event_0s512qc" targetRef="TextAnnotation_0iax5ku" />\n  </bpmn:process>\n  <bpmn:message id="Message_0qjx6pj" name="ATOM" />\n  <bpmn:message id="Message_1uyab20" name="SAP_INBOUND_EVENT" />\n  <bpmn:message id="Message_1hxwyuf" name="ACTIVESAP" />\n  <bpmn:signal id="Signal_1bemm2u" name="DisputeClose" />\n  <bpmn:message id="Message_0axvte4" name="dispute_close" />\n  <bpmndi:BPMNDiagram id="BPMNDiagram_1">\n    <bpmndi:BPMNPlane id="BPMNPlane_1" bpmnElement="DISPUTE_SAP_INBOUND">\n      <bpmndi:BPMNEdge id="Flow_0dz7dly_di" bpmnElement="Flow_0dz7dly">\n        <di:waypoint x="1420" y="120" />\n        <di:waypoint x="1482" y="120" />\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge id="Flow_0b76qi1_di" bpmnElement="Flow_0b76qi1">\n        <di:waypoint x="1180" y="225" />\n        <di:waypoint x="1180" y="120" />\n        <di:waypoint x="1320" y="120" />\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge id="Flow_027849y_di" bpmnElement="Flow_027849y">\n        <di:waypoint x="1205" y="250" />\n        <di:waypoint x="1442" y="250" />\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge id="Flow_0smifql_di" bpmnElement="Flow_0smifql">\n        <di:waypoint x="1000" y="120" />\n        <di:waypoint x="1070" y="120" />\n        <di:waypoint x="1070" y="225" />\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge id="Flow_073l8pm_di" bpmnElement="Flow_073l8pm">\n        <di:waypoint x="820" y="225" />\n        <di:waypoint x="820" y="120" />\n        <di:waypoint x="900" y="120" />\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge id="Flow_0yidmvh_di" bpmnElement="Flow_0yidmvh">\n        <di:waypoint x="845" y="250" />\n        <di:waypoint x="900" y="250" />\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge id="Flow_019gl9e_di" bpmnElement="Flow_019gl9e">\n        <di:waypoint x="690" y="320" />\n        <di:waypoint x="690" y="290" />\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge id="Flow_1wzdi3d_di" bpmnElement="Flow_1wzdi3d">\n        <di:waypoint x="510" y="250" />\n        <di:waypoint x="670" y="250" />\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge id="Flow_0xjxcyk_di" bpmnElement="Flow_0xjxcyk">\n        <di:waypoint x="690" y="445" />\n        <di:waypoint x="690" y="400" />\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge id="Flow_0l18olf_di" bpmnElement="Flow_0l18olf">\n        <di:waypoint x="850" y="528" />\n        <di:waypoint x="850" y="590" />\n        <di:waypoint x="932" y="590" />\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge id="Flow_01068a5_di" bpmnElement="Flow_01068a5">\n        <di:waypoint x="1000" y="250" />\n        <di:waypoint x="1045" y="250" />\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge id="Flow_10wyo6d_di" bpmnElement="Flow_10wyo6d">\n        <di:waypoint x="690" y="495" />\n        <di:waypoint x="690" y="590" />\n        <di:waypoint x="772" y="590" />\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge id="Flow_1nctbic_di" bpmnElement="Flow_1nctbic">\n        <di:waypoint x="800" y="470" />\n        <di:waypoint x="715" y="470" />\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge id="Flow_1lpi1fk_di" bpmnElement="Flow_1lpi1fk">\n        <di:waypoint x="770" y="250" />\n        <di:waypoint x="795" y="250" />\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge id="Flow_1ugihsf_di" bpmnElement="Flow_1ugihsf">\n        <di:waypoint x="1070" y="275" />\n        <di:waypoint x="1070" y="470" />\n        <di:waypoint x="900" y="470" />\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge id="Flow_0xdk3w5_di" bpmnElement="Flow_0xdk3w5">\n        <di:waypoint x="1095" y="250" />\n        <di:waypoint x="1155" y="250" />\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge id="Flow_0nwt85g_di" bpmnElement="Flow_0nwt85g">\n        <di:waypoint x="218" y="250" />\n        <di:waypoint x="410" y="250" />\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNShape id="Activity_0deanb3_di" bpmnElement="Activity_1w9tz6j" bioc:stroke="rgb(67, 160, 71)" bioc:fill="rgb(200, 230, 201)">\n        <dc:Bounds x="410" y="210" width="100" height="80" />\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape id="Event_0lcuwyx_di" bpmnElement="Event_0lcuwyx" bioc:stroke="rgb(142, 36, 170)" bioc:fill="rgb(225, 190, 231)">\n        <dc:Bounds x="182" y="232" width="36" height="36" />\n        <bpmndi:BPMNLabel>\n          <dc:Bounds x="160" y="275" width="82" height="27" />\n        </bpmndi:BPMNLabel>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape id="Gateway_0n4a6ot_di" bpmnElement="Gateway_0n4a6ot" isMarkerVisible="true" bioc:stroke="rgb(251, 140, 0)" bioc:fill="rgb(255, 224, 178)">\n        <dc:Bounds x="1045" y="225" width="50" height="50" />\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape id="Activity_0qde3ea_di" bpmnElement="Activity_0qde3ea" bioc:stroke="rgb(251, 140, 0)" bioc:fill="rgb(255, 224, 178)">\n        <dc:Bounds x="670" y="210" width="100" height="80" />\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape id="Activity_04ye2rq_di" bpmnElement="RetrySAPCall">\n        <dc:Bounds x="800" y="430" width="100" height="80" />\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape id="Gateway_1npnv65_di" bpmnElement="Gateway_1npnv65" isMarkerVisible="true">\n        <dc:Bounds x="665" y="445" width="50" height="50" />\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape id="Activity_12ocsvv_di" bpmnElement="Activity_12ocsvv" bioc:stroke="rgb(251, 140, 0)" bioc:fill="rgb(255, 224, 178)">\n        <dc:Bounds x="900" y="210" width="100" height="80" />\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape id="Event_1ptqw7t_di" bpmnElement="Event_166c1yb" bioc:stroke="rgb(142, 36, 170)" bioc:fill="rgb(225, 190, 231)">\n        <dc:Bounds x="1442" y="232" width="36" height="36" />\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape id="Event_0vccxlw_di" bpmnElement="Event_103f293">\n        <dc:Bounds x="772" y="572" width="36" height="36" />\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape id="Event_0ew9rqr_di" bpmnElement="Event_0mphg3k">\n        <dc:Bounds x="932" y="572" width="36" height="36" />\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape id="Activity_14z67lu_di" bpmnElement="Activity_14z67lu" bioc:stroke="rgb(251, 140, 0)" bioc:fill="rgb(255, 224, 178)">\n        <dc:Bounds x="640" y="320" width="100" height="80" />\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape id="Gateway_0zqbot3_di" bpmnElement="Gateway_0zqbot3" isMarkerVisible="true">\n        <dc:Bounds x="795" y="225" width="50" height="50" />\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape id="Activity_0rigmcu_di" bpmnElement="Activity_0rigmcu" bioc:stroke="rgb(251, 140, 0)" bioc:fill="rgb(255, 224, 178)">\n        <dc:Bounds x="900" y="80" width="100" height="80" />\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape id="Gateway_13b9q4i_di" bpmnElement="Gateway_13b9q4i" isMarkerVisible="true">\n        <dc:Bounds x="1155" y="225" width="50" height="50" />\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape id="Event_0q04o7a_di" bpmnElement="Event_0q04o7a">\n        <dc:Bounds x="1482" y="102" width="36" height="36" />\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape id="Activity_1cpf4cg_di" bpmnElement="Activity_1cpf4cg" bioc:stroke="rgb(251, 140, 0)" bioc:fill="rgb(255, 224, 178)">\n        <dc:Bounds x="1320" y="80" width="100" height="80" />\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape id="TextAnnotation_0iax5ku_di" bpmnElement="TextAnnotation_0iax5ku">\n        <dc:Bounds x="1150" y="450" width="100" height="120" />\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape id="Event_0cswqsn_di" bpmnElement="Event_0s512qc">\n        <dc:Bounds x="832" y="492" width="36" height="36" />\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNEdge id="Association_1hcsnsf_di" bpmnElement="Association_1hcsnsf">\n        <di:waypoint x="868" y="508" />\n        <di:waypoint x="1150" y="471" />\n      </bpmndi:BPMNEdge>\n    </bpmndi:BPMNPlane>\n  </bpmndi:BPMNDiagram>\n</bpmn:definitions>\n',
};

// mock diagram data

export const getDiagramXml = () => {
  return new Promise((resolve) => {
    // after 2 sec return diagram mock data
    setTimeout(() => {
      resolve(bpmnDiagramData);
    }, 2000);
  });
};
