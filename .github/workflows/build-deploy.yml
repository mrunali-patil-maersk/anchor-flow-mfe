name: Build and Deploy on Azure K8s Cluster
on:
  push:
    branches:
      - "*"
    paths-ignore:
      - "**/README.md"
      - ".github/workflows/manual-*.yml"
  pull_request:
    branches:
      - main
    paths-ignore:
      - "**/README.md"
      - ".github/workflows/manual-*.yml"

env:
  APP_NAME: anchor-flow
  CONTAINER_REGISTRY: maerskao.azurecr.io
  CLUSTER: core-dev-west-1

jobs:
  set-image-tag:
    runs-on: ubuntu-20.04
    env:
      NEXUS_USER: ${{ secrets.MDN_NEXUS_WRITE_USERNAME }}
      NEXUS_PASS: ${{ secrets.MDN_NEXUS_WRITE_PASSWORD }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      NPM_TOKEN: ${{ secrets.MDN_NEXUS_WRITE_PASSWORD }}
      BRANCH_NAME: ${GITHUB_REF#refs/heads/}
      BUILD_NUMBER: ${GITHUB_RUN_NUMBER}
      COMMIT_ID: ${GITHUB_SHA}
    outputs:
      image-tag: ${{ steps.image_tag.outputs.IMAGE_TAG }}
    steps:
      - id: image_tag
        run: echo "##[set-output name=IMAGE_TAG;]$(echo ${{env.CONTAINER_REGISTRY}}/${{ env.APP_NAME }}:${{ env.BRANCH_NAME }}_${{ env.BUILD_NUMBER }}_${{ env.COMMIT_ID }})"
  build:
    runs-on: ubuntu-20.04
    needs: set-image-tag
    environment: dev
    strategy:
      matrix:
        node-version: [16.x]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Restore dependency cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-cache-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-cache-

      - name: Setup npm auth
        run: |
          echo "strict-ssl=false" >> ~/.npmrc
          echo "always-auth=true" >> ~/.npmrc
          echo "registry=https://tools-nexus.maerskdev.net/repository/npm-group-internal/" >> ~/.npmrc
          echo "_auth=${{ secrets.NPM_TOKEN }}" >> ~/.npmrc
          echo "scripts-prepend-node-path=true" >> ~/.npmrc

      - name: Install dependendices
        run: yarn install --frozen-lockfile

      # Commenting it for now to get the CICD success. Uncomment once test cases are fixed
      # - name: Run Lint test
      #   run: yarn test

      # - name: Run semantic-release
      #   if: github.ref == 'refs/heads/main'
      #   run: yarn semantic-release

      - name: Build Next App
        run: yarn build

      - name: Print Image Tag
        run: echo 'Image Tag is' ${{ needs.set-image-tag.outputs.image-tag }}

      - name: Delete .npmrc
        run: rm -rf ~/.npmrc

      - name: Setup Docker BuildX
        uses: docker/setup-buildx-action@v1.6.0

      - name: Docker Login
        uses: docker/login-action@v1.10.0
        with:
          registry: ${{env.CONTAINER_REGISTRY}}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PWD }}
          logout: true
      - name: Build and Push Docker image to Azure Container Registry
        if: github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v2.7.0
        with:
          context: .
          file: ./Dockerfile
          tags: ${{ needs.set-image-tag.outputs.image-tag }}

          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          push: true
  set-clusters:
    runs-on: ubuntu-20.04
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    if: github.ref == 'refs/heads/main'
    steps:
      - id: set-matrix
        run: echo "::set-output name=matrix::{\"include\":[{\"cluster\":\"${{env.CLUSTER}}\",\"environment\":\"dev\"}]}"
  check-matrix:
    runs-on: ubuntu-20.04
    needs: set-clusters
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Install json2yaml
        run: |
          sudo npm install -g json2yaml
      - name: Check matrix definition
        run: |
          matrix='${{ needs.set-clusters.outputs.matrix }}'
          echo $matrix
          echo $matrix | jq .
          echo $matrix | json2yaml
  deploy:
    runs-on: ubuntu-20.04
    environment: dev
    needs: [set-clusters, check-matrix, set-image-tag, build]
    timeout-minutes: 10
    name: deploy

    strategy:
      matrix: ${{fromJson(needs.set-clusters.outputs.matrix)}}

    if: github.ref == 'refs/heads/main'
    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          repository: "Maersk-Global/anchor-flow-rules"
          ref: develop
          token: ${{ secrets.REPO_ACCESS_TOKEN }}

      - name: Setup Kubernetes Manifest
        run: |
          sed -i "s#__DOCKER_IMAGE_NAME__#${{ needs.set-image-tag.outputs.image-tag }}#g" aks/deploy.yml
          sed -i "s#__NEXT_PUBLIC_AZURE_AD_CLIENT_ID__#${{ secrets.NEXT_PUBLIC_AZURE_AD_CLIENT_ID }}#g" aks/configmap.yml
          sed -i "s#__NEXT_PUBLIC_AZURE_AD_TENANT_ID__#${{ secrets.NEXT_PUBLIC_AZURE_AD_TENANT_ID }}#g" aks/configmap.yml
          sed -i "s#__AZURE_AD_CLIENT_SECRET__#${{ secrets.AZURE_AD_CLIENT_SECRET }}#g" aks/configmap.yml
          sed -i "s#__AZURE_AD_SERVICE_OBJECT_ID__#${{ secrets.AZURE_AD_SERVICE_OBJECT_ID }}#g" aks/configmap.yml
          sed -i "s#__SECRET__#${{ secrets.SECRET }}#g" aks/configmap.yml

      - name: Import Secrets
        uses: hashicorp/vault-action@v2.3.0
        id: k8ssecrets
        with:
          url: https://vault.maersk-digital.net
          tlsSkipVerify: false
          exportEnv: false
          # exportToken: true  - optionally export the VAULT_TOKEN
          method: approle
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_ROLE_SECRET_ID }}
          secrets: |
            anchoratom-kv/data/kubernetes/${{ matrix.cluster }}/cert cert;
            anchoratom-kv/data/kubernetes/${{ matrix.cluster }}/token token;
            anchoratom-kv/data/kubernetes/${{ matrix.cluster }}/server server;

      - name: set kubernetes cluster context for ${{ matrix.cluster }}
        run: |
          kubectl config set-credentials default --token=${{ steps.k8ssecrets.outputs.token }};
          echo ${{ steps.k8ssecrets.outputs.cert }} | base64 -d > ./kubectl-ca.crt;
          kubectl config set-cluster default --server=${{ steps.k8ssecrets.outputs.server }} --certificate-authority=./kubectl-ca.crt;
          kubectl config set-context default --cluster=default --user=default;
          kubectl config use-context default;

      - name: Deploy to cluster ${{ matrix.cluster }} and env ${{ matrix.environment }}
        run: |
          kubectl apply -R -f aks
